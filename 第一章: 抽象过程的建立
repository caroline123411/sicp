John在关于人的理解力的文章中说过， 人类发挥思想的作用，超越简单想法的方法一般有三种： 
1. 把几个简单的想法组合起来，从而形成复杂的想法； 
2. 挑出两个不同的想法，或简单或复杂，把他们放在一起比较，从而找出他们之间的联系；
3. 把一些想法从真实世界中其他的想法中抽离出来，形成一般的规律和观点，我们叫抽象。

我们将要学习“计算过程”这个概念。计算过程是居住在计算机上的抽象物种。随着它们的演化，流程操纵其他称为数据的抽象事物。流程的演变由称为“程序”的一组规则模式指导。人们创建程序去影响计算过程。实际上，我们用我们的法术召唤计算机的精神。

事实上，计算过程非常像巫师对精神的想法，他不能被看见，被触摸到。他不是由具体的事物组成的，然而它又真实的存在。它能完成智能工作，它可以回答问题。它可以通过向银行支付资金或通过控制工厂中的机器人手臂来影响世界。我们用来召唤计算过程的程序就像魔法师的法术，它们是由神秘和深奥的编程语言中的符号表达式精心组成的，它们定义了我们希望我们的计算过程执行的任务。

在正确工作的计算机中，计算过程精确且准确地执行程序。因此，像巫师的学徒一样，新手程序员必须学会理解并预测他们魔术的后果。程序中非常小的错误都可能导致复杂的或者不可预见的后果。

幸运的是，学习编程比学习巫术要安全的多，因为我们处理的精神很方便地以安全的方式被包裹。然而真实世界的程序，仍然要求谨慎，专业和智慧。例如，计算机辅助设计程序中的一个小错误可能导致飞机或大坝的灾难性崩溃或工业机器人的自毁。

软件工程大师们有组织程序的能力，以至于他们有理由相信程序会按照他们设想的任务完成得到他们想要的结果。他们可以提前预见他们系统的行为。他们知道如果构建程序以避免不可预见的问题不会导致灾难性后果，当问题出现时，他们知道如何调试程序。

良好设计的计算系统，像是自动飞行或者核电站反应堆，都是以模块的方式设计出来的，模块可以独立的被构建，替换和调试。
